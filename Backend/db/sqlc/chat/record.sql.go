// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: record.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRecord = `-- name: DeleteRecord :exec
DELETE FROM "record"
WHERE target_id = $1
AND created_at = $2
`

type DeleteRecordParams struct {
	TargetID  int32              `json:"target_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) DeleteRecord(ctx context.Context, arg DeleteRecordParams) error {
	_, err := q.db.Exec(ctx, deleteRecord, arg.TargetID, arg.CreatedAt)
	return err
}

const getrecord = `-- name: Getrecord :many
SELECT target_id, msg_type, message, images, created_at FROM "record"
WHERE target_id = $1
ORDER BY created_at
`

func (q *Queries) Getrecord(ctx context.Context, targetID int32) ([]Record, error) {
	rows, err := q.db.Query(ctx, getrecord, targetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Record{}
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.TargetID,
			&i.MsgType,
			&i.Message,
			&i.Images,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRecord = `-- name: InsertRecord :one
INSERT INTO "record" (
    target_id,
    msg_type,
    message,
    images
) VALUES (
    $1,$2,$3,$4
) RETURNING target_id, msg_type, message, images, created_at
`

type InsertRecordParams struct {
	TargetID int32       `json:"target_id"`
	MsgType  string      `json:"msg_type"`
	Message  string `json:"message"`
	Images   string `json:"images"`
}

func (q *Queries) InsertRecord(ctx context.Context, arg InsertRecordParams) (Record, error) {
	row := q.db.QueryRow(ctx, insertRecord,
		arg.TargetID,
		arg.MsgType,
		arg.Message,
		arg.Images,
	)
	var i Record
	err := row.Scan(
		&i.TargetID,
		&i.MsgType,
		&i.Message,
		&i.Images,
		&i.CreatedAt,
	)
	return i, err
}

const updateRecord = `-- name: UpdateRecord :one
UPDATE "record"
SET message = $4
WHERE target_id = $1
  AND msg_type = $2
  AND created_at = $3
RETURNING target_id, msg_type, message, images, created_at
`

type UpdateRecordParams struct {
	TargetID  int32              `json:"target_id"`
	MsgType   string             `json:"msg_type"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Message   string        `json:"message"`
}

func (q *Queries) UpdateRecord(ctx context.Context, arg UpdateRecordParams) (Record, error) {
	row := q.db.QueryRow(ctx, updateRecord,
		arg.TargetID,
		arg.MsgType,
		arg.CreatedAt,
		arg.Message,
	)
	var i Record
	err := row.Scan(
		&i.TargetID,
		&i.MsgType,
		&i.Message,
		&i.Images,
		&i.CreatedAt,
	)
	return i, err
}
