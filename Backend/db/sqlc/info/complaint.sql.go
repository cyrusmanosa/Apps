// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: complaint.sql

package db

import (
	"context"
)

const createComplaint = `-- name: CreateComplaint :one
INSERT INTO complaint (
    user_id,
    cp_target_id,
    cp_type,
    cp_message
) VALUES (
    $1,$2,$3,$4
) RETURNING cp_id, user_id, cp_target_id, cp_type, cp_message, status, complaint_time
`

type CreateComplaintParams struct {
	UserID     int32  `json:"user_id"`
	CpTargetID int32  `json:"cp_target_id"`
	CpType     string `json:"cp_type"`
	CpMessage  string `json:"cp_message"`
}

func (q *Queries) CreateComplaint(ctx context.Context, arg CreateComplaintParams) (Complaint, error) {
	row := q.db.QueryRow(ctx, createComplaint,
		arg.UserID,
		arg.CpTargetID,
		arg.CpType,
		arg.CpMessage,
	)
	var i Complaint
	err := row.Scan(
		&i.CpID,
		&i.UserID,
		&i.CpTargetID,
		&i.CpType,
		&i.CpMessage,
		&i.Status,
		&i.ComplaintTime,
	)
	return i, err
}

const deleteComplaint = `-- name: DeleteComplaint :exec
DELETE FROM complaint
WHERE cp_id = $1
`

func (q *Queries) DeleteComplaint(ctx context.Context, cpID int32) error {
	_, err := q.db.Exec(ctx, deleteComplaint, cpID)
	return err
}

const getUserComplaintList = `-- name: GetUserComplaintList :one
SELECT cp_id, user_id, cp_target_id, cp_type, cp_message, status, complaint_time FROM complaint
WHERE cp_id = $1
`

func (q *Queries) GetUserComplaintList(ctx context.Context, cpID int32) (Complaint, error) {
	row := q.db.QueryRow(ctx, getUserComplaintList, cpID)
	var i Complaint
	err := row.Scan(
		&i.CpID,
		&i.UserID,
		&i.CpTargetID,
		&i.CpType,
		&i.CpMessage,
		&i.Status,
		&i.ComplaintTime,
	)
	return i, err
}

const listComplaint = `-- name: ListComplaint :many
SELECT cp_id, user_id, cp_target_id, cp_type, cp_message, status, complaint_time FROM complaint
ORDER BY cp_id
`

func (q *Queries) ListComplaint(ctx context.Context) ([]Complaint, error) {
	rows, err := q.db.Query(ctx, listComplaint)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Complaint{}
	for rows.Next() {
		var i Complaint
		if err := rows.Scan(
			&i.CpID,
			&i.UserID,
			&i.CpTargetID,
			&i.CpType,
			&i.CpMessage,
			&i.Status,
			&i.ComplaintTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserComplaint = `-- name: UpdateUserComplaint :one
UPDATE complaint
SET status = $2
WHERE cp_id = $1
RETURNING cp_id, user_id, cp_target_id, cp_type, cp_message, status, complaint_time
`

type UpdateUserComplaintParams struct {
	CpID   int32       `json:"cp_id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateUserComplaint(ctx context.Context, arg UpdateUserComplaintParams) (Complaint, error) {
	row := q.db.QueryRow(ctx, updateUserComplaint, arg.CpID, arg.Status)
	var i Complaint
	err := row.Scan(
		&i.CpID,
		&i.UserID,
		&i.CpTargetID,
		&i.CpType,
		&i.CpMessage,
		&i.Status,
		&i.ComplaintTime,
	)
	return i, err
}
