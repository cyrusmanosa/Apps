// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: hobbyrequest.sql

package db

import (
	"context"
)

const createHobbyRequest = `-- name: CreateHobbyRequest :one
INSERT INTO hobbyrequest (
    user_id,
    era,
    city,
    gender,
    height,
    weight,
    find_type,
    find_target,
    experience,
    sociability,
    certification
) VALUES (
    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11
) RETURNING user_id, era, city, gender, height, weight, find_type, find_target, experience, sociability, certification, info_changed_at
`

type CreateHobbyRequestParams struct {
	UserID        int32       `json:"user_id"`
	Era           int32       `json:"era"`
	City          string      `json:"city"`
	Gender        string      `json:"gender"`
	Height        int32       `json:"height"`
	Weight        int32       `json:"weight"`
	FindType      string      `json:"find_type"`
	FindTarget    string      `json:"find_target"`
	Experience    int32       `json:"experience"`
	Sociability   string      `json:"sociability"`
	Certification bool `json:"certification"`
}

func (q *Queries) CreateHobbyRequest(ctx context.Context, arg CreateHobbyRequestParams) (Hobbyrequest, error) {
	row := q.db.QueryRow(ctx, createHobbyRequest,
		arg.UserID,
		arg.Era,
		arg.City,
		arg.Gender,
		arg.Height,
		arg.Weight,
		arg.FindType,
		arg.FindTarget,
		arg.Experience,
		arg.Sociability,
		arg.Certification,
	)
	var i Hobbyrequest
	err := row.Scan(
		&i.UserID,
		&i.Era,
		&i.City,
		&i.Gender,
		&i.Height,
		&i.Weight,
		&i.FindType,
		&i.FindTarget,
		&i.Experience,
		&i.Sociability,
		&i.Certification,
		&i.InfoChangedAt,
	)
	return i, err
}

const deleteUserHobby = `-- name: DeleteUserHobby :exec
DELETE FROM hobbyrequest 
WHERE user_id = $1
`

func (q *Queries) DeleteUserHobby(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserHobby, userID)
	return err
}

const getUserHobby = `-- name: GetUserHobby :one
SELECT user_id, era, city, gender, height, weight, find_type, find_target, experience, sociability, certification, info_changed_at FROM hobbyrequest
WHERE user_id = $1
`

func (q *Queries) GetUserHobby(ctx context.Context, userID int32) (Hobbyrequest, error) {
	row := q.db.QueryRow(ctx, getUserHobby, userID)
	var i Hobbyrequest
	err := row.Scan(
		&i.UserID,
		&i.Era,
		&i.City,
		&i.Gender,
		&i.Height,
		&i.Weight,
		&i.FindType,
		&i.FindTarget,
		&i.Experience,
		&i.Sociability,
		&i.Certification,
		&i.InfoChangedAt,
	)
	return i, err
}

const listUserHobby = `-- name: ListUserHobby :many
SELECT user_id, era, city, gender, height, weight, find_type, find_target, experience, sociability, certification, info_changed_at FROM hobbyrequest
ORDER BY user_id
`

func (q *Queries) ListUserHobby(ctx context.Context) ([]Hobbyrequest, error) {
	rows, err := q.db.Query(ctx, listUserHobby)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Hobbyrequest{}
	for rows.Next() {
		var i Hobbyrequest
		if err := rows.Scan(
			&i.UserID,
			&i.Era,
			&i.City,
			&i.Gender,
			&i.Height,
			&i.Weight,
			&i.FindType,
			&i.FindTarget,
			&i.Experience,
			&i.Sociability,
			&i.Certification,
			&i.InfoChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserHobby = `-- name: UpdateUserHobby :one
UPDATE hobbyrequest
SET era = $2,
    city = $3,
    gender = $4,
    height = $5,
    weight = $6,
    find_type = $7,
    find_target = $8,
    experience = $9,
    sociability = $10,
    certification = $11
WHERE user_id = $1
RETURNING user_id, era, city, gender, height, weight, find_type, find_target, experience, sociability, certification, info_changed_at
`

type UpdateUserHobbyParams struct {
	UserID        int32       `json:"user_id"`
	Era           int32       `json:"era"`
	City          string      `json:"city"`
	Gender        string      `json:"gender"`
	Height        int32       `json:"height"`
	Weight        int32       `json:"weight"`
	FindType      string      `json:"find_type"`
	FindTarget    string      `json:"find_target"`
	Experience    int32       `json:"experience"`
	Sociability   string      `json:"sociability"`
	Certification bool `json:"certification"`
}

func (q *Queries) UpdateUserHobby(ctx context.Context, arg UpdateUserHobbyParams) (Hobbyrequest, error) {
	row := q.db.QueryRow(ctx, updateUserHobby,
		arg.UserID,
		arg.Era,
		arg.City,
		arg.Gender,
		arg.Height,
		arg.Weight,
		arg.FindType,
		arg.FindTarget,
		arg.Experience,
		arg.Sociability,
		arg.Certification,
	)
	var i Hobbyrequest
	err := row.Scan(
		&i.UserID,
		&i.Era,
		&i.City,
		&i.Gender,
		&i.Height,
		&i.Weight,
		&i.FindType,
		&i.FindTarget,
		&i.Experience,
		&i.Sociability,
		&i.Certification,
		&i.InfoChangedAt,
	)
	return i, err
}
