// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: loverrequest.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLoverRequest = `-- name: CreateLoverRequest :one
INSERT INTO loverrequest (
    user_id,
    min_age,
    max_age,
    country,
    city,
    age,
    gender,
    constellation,
    blood,
    sexual,
    height,
    weight,
    Education,
    job,
    annual_salary,
    sociability,
    religious,
    certification
) VALUES (
    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18
) RETURNING user_id, min_age, max_age, country, city, age, gender, constellation, blood, sexual, height, weight, education, job, annual_salary, sociability, religious, certification, info_changed_at
`

type CreateLoverRequestParams struct {
	UserID        int32       `json:"user_id"`
	MinAge        int32       `json:"min_age"`
	MaxAge        int32       `json:"max_age"`
	Country       string      `json:"country"`
	City          string      `json:"city"`
	Age           int32       `json:"age"`
	Gender        string      `json:"gender"`
	Constellation string      `json:"constellation"`
	Blood         string      `json:"blood"`
	Sexual        string      `json:"sexual"`
	Height        int32       `json:"height"`
	Weight        int32       `json:"weight"`
	Education     string      `json:"education"`
	Job           string      `json:"job"`
	AnnualSalary  int32       `json:"annual_salary"`
	Sociability   string      `json:"sociability"`
	Religious     string      `json:"religious"`
	Certification pgtype.Bool `json:"certification"`
}

func (q *Queries) CreateLoverRequest(ctx context.Context, arg CreateLoverRequestParams) (Loverrequest, error) {
	row := q.db.QueryRow(ctx, createLoverRequest,
		arg.UserID,
		arg.MinAge,
		arg.MaxAge,
		arg.Country,
		arg.City,
		arg.Age,
		arg.Gender,
		arg.Constellation,
		arg.Blood,
		arg.Sexual,
		arg.Height,
		arg.Weight,
		arg.Education,
		arg.Job,
		arg.AnnualSalary,
		arg.Sociability,
		arg.Religious,
		arg.Certification,
	)
	var i Loverrequest
	err := row.Scan(
		&i.UserID,
		&i.MinAge,
		&i.MaxAge,
		&i.Country,
		&i.City,
		&i.Age,
		&i.Gender,
		&i.Constellation,
		&i.Blood,
		&i.Sexual,
		&i.Height,
		&i.Weight,
		&i.Education,
		&i.Job,
		&i.AnnualSalary,
		&i.Sociability,
		&i.Religious,
		&i.Certification,
		&i.InfoChangedAt,
	)
	return i, err
}

const deleteUserLoverRequest = `-- name: DeleteUserLoverRequest :exec
DELETE FROM loverrequest 
WHERE user_id = $1
`

func (q *Queries) DeleteUserLoverRequest(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserLoverRequest, userID)
	return err
}

const getUserLover = `-- name: GetUserLover :one
SELECT user_id, min_age, max_age, country, city, age, gender, constellation, blood, sexual, height, weight, education, job, annual_salary, sociability, religious, certification, info_changed_at FROM loverrequest
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserLover(ctx context.Context, userID int32) (Loverrequest, error) {
	row := q.db.QueryRow(ctx, getUserLover, userID)
	var i Loverrequest
	err := row.Scan(
		&i.UserID,
		&i.MinAge,
		&i.MaxAge,
		&i.Country,
		&i.City,
		&i.Age,
		&i.Gender,
		&i.Constellation,
		&i.Blood,
		&i.Sexual,
		&i.Height,
		&i.Weight,
		&i.Education,
		&i.Job,
		&i.AnnualSalary,
		&i.Sociability,
		&i.Religious,
		&i.Certification,
		&i.InfoChangedAt,
	)
	return i, err
}

const listUserLover = `-- name: ListUserLover :many
SELECT user_id, min_age, max_age, country, city, age, gender, constellation, blood, sexual, height, weight, education, job, annual_salary, sociability, religious, certification, info_changed_at FROM loverrequest
ORDER BY user_id
`

func (q *Queries) ListUserLover(ctx context.Context) ([]Loverrequest, error) {
	rows, err := q.db.Query(ctx, listUserLover)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Loverrequest{}
	for rows.Next() {
		var i Loverrequest
		if err := rows.Scan(
			&i.UserID,
			&i.MinAge,
			&i.MaxAge,
			&i.Country,
			&i.City,
			&i.Age,
			&i.Gender,
			&i.Constellation,
			&i.Blood,
			&i.Sexual,
			&i.Height,
			&i.Weight,
			&i.Education,
			&i.Job,
			&i.AnnualSalary,
			&i.Sociability,
			&i.Religious,
			&i.Certification,
			&i.InfoChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserLover = `-- name: UpdateUserLover :one
UPDATE loverrequest
SET min_age = $2,
    max_age = $3,
    country = $4,
    city = $5,
    age = $6,
    gender = $7,
    constellation = $8,
    blood = $9,
    sexual = $10,
    height = $11,
    weight = $12,
    Education = $13,
    job = $14,
    annual_salary = $15,
    sociability = $16,
    religious = $17,
    certification = $18
WHERE user_id = $1
RETURNING user_id, min_age, max_age, country, city, age, gender, constellation, blood, sexual, height, weight, education, job, annual_salary, sociability, religious, certification, info_changed_at
`

type UpdateUserLoverParams struct {
	UserID        int32       `json:"user_id"`
	MinAge        int32       `json:"min_age"`
	MaxAge        int32       `json:"max_age"`
	Country       string      `json:"country"`
	City          string      `json:"city"`
	Age           int32       `json:"age"`
	Gender        string      `json:"gender"`
	Constellation string      `json:"constellation"`
	Blood         string      `json:"blood"`
	Sexual        string      `json:"sexual"`
	Height        int32       `json:"height"`
	Weight        int32       `json:"weight"`
	Education     string      `json:"education"`
	Job           string      `json:"job"`
	AnnualSalary  int32       `json:"annual_salary"`
	Sociability   string      `json:"sociability"`
	Religious     string      `json:"religious"`
	Certification pgtype.Bool `json:"certification"`
}

func (q *Queries) UpdateUserLover(ctx context.Context, arg UpdateUserLoverParams) (Loverrequest, error) {
	row := q.db.QueryRow(ctx, updateUserLover,
		arg.UserID,
		arg.MinAge,
		arg.MaxAge,
		arg.Country,
		arg.City,
		arg.Age,
		arg.Gender,
		arg.Constellation,
		arg.Blood,
		arg.Sexual,
		arg.Height,
		arg.Weight,
		arg.Education,
		arg.Job,
		arg.AnnualSalary,
		arg.Sociability,
		arg.Religious,
		arg.Certification,
	)
	var i Loverrequest
	err := row.Scan(
		&i.UserID,
		&i.MinAge,
		&i.MaxAge,
		&i.Country,
		&i.City,
		&i.Age,
		&i.Gender,
		&i.Constellation,
		&i.Blood,
		&i.Sexual,
		&i.Height,
		&i.Weight,
		&i.Education,
		&i.Job,
		&i.AnnualSalary,
		&i.Sociability,
		&i.Religious,
		&i.Certification,
		&i.InfoChangedAt,
	)
	return i, err
}
