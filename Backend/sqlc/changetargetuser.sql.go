// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: changetargetuser.sql

package db

import (
	"context"
)

const allChangeTargetUserList = `-- name: AllChangeTargetUserList :many
SELECT user_id, change_user_id, reason, reply_user_id, frequency, change_time FROM changetargetuser
ORDER BY user_id
`

func (q *Queries) AllChangeTargetUserList(ctx context.Context) ([]Changetargetuser, error) {
	rows, err := q.db.Query(ctx, allChangeTargetUserList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Changetargetuser{}
	for rows.Next() {
		var i Changetargetuser
		if err := rows.Scan(
			&i.UserID,
			&i.ChangeUserID,
			&i.Reason,
			&i.ReplyUserID,
			&i.Frequency,
			&i.ChangeTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createChangeTargetUser = `-- name: CreateChangeTargetUser :one
INSERT INTO changetargetuser (
    user_id,
    change_user_id,
    reason,
    reply_user_id,
    frequency
) VALUES (
    $1,$2,$3,$4,$5
) RETURNING user_id, change_user_id, reason, reply_user_id, frequency, change_time
`

type CreateChangeTargetUserParams struct {
	UserID       int32  `json:"user_id"`
	ChangeUserID int32  `json:"change_user_id"`
	Reason       string `json:"reason"`
	ReplyUserID  int32  `json:"reply_user_id"`
	Frequency    int32  `json:"frequency"`
}

func (q *Queries) CreateChangeTargetUser(ctx context.Context, arg CreateChangeTargetUserParams) (Changetargetuser, error) {
	row := q.db.QueryRow(ctx, createChangeTargetUser,
		arg.UserID,
		arg.ChangeUserID,
		arg.Reason,
		arg.ReplyUserID,
		arg.Frequency,
	)
	var i Changetargetuser
	err := row.Scan(
		&i.UserID,
		&i.ChangeUserID,
		&i.Reason,
		&i.ReplyUserID,
		&i.Frequency,
		&i.ChangeTime,
	)
	return i, err
}

const deleteData = `-- name: DeleteData :exec
DELETE FROM changetargetuser
WHERE user_id = $1
`

func (q *Queries) DeleteData(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteData, userID)
	return err
}

const getChangeTargetUserList = `-- name: GetChangeTargetUserList :one
SELECT user_id, change_user_id, reason, reply_user_id, frequency, change_time FROM changetargetuser
WHERE user_id = $1
`

func (q *Queries) GetChangeTargetUserList(ctx context.Context, userID int32) (Changetargetuser, error) {
	row := q.db.QueryRow(ctx, getChangeTargetUserList, userID)
	var i Changetargetuser
	err := row.Scan(
		&i.UserID,
		&i.ChangeUserID,
		&i.Reason,
		&i.ReplyUserID,
		&i.Frequency,
		&i.ChangeTime,
	)
	return i, err
}
