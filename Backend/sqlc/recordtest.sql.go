// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: recordtest.sql

package db

import (
	"context"
)

const getrecode = `-- name: Getrecord :one
SELECT user_id, target_id, message, images, created_at FROM recordtest
WHERE user_id = $1
`

func (q *Queries) Getrecord(ctx context.Context, userID int32) (Recordtest, error) {
	row := q.db.QueryRow(ctx, getrecode, userID)
	var i Recordtest
	err := row.Scan(
		&i.UserID,
		&i.TargetID,
		&i.Message,
		&i.Images,
		&i.CreatedAt,
	)
	return i, err
}

const listrecord = `-- name: Listrecode :many
SELECT user_id, target_id, message, images, created_at FROM recordtest
ORDER BY created_at
`

func (q *Queries) Listrecord(ctx context.Context) ([]Recordtest, error) {
	rows, err := q.db.Query(ctx, listrecord)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recordtest{}
	for rows.Next() {
		var i Recordtest
		if err := rows.Scan(
			&i.UserID,
			&i.TargetID,
			&i.Message,
			&i.Images,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recodeTest = `-- name: recordTest :one
INSERT INTO recordtest (
    user_id,
    target_id,
    message,
    images
) VALUES (
    $1,$2,$3,$4
) RETURNING user_id, target_id, message, images, created_at
`

type RecordTestParams struct {
	UserID   int32       `json:"user_id"`
	TargetID int32       `json:"target_id"`
	Message  string 	 `json:"message"`
	Images   string      `json:"images"`
}

func (q *Queries) RecodeTest(ctx context.Context, arg RecordTestParams) (Recordtest, error) {
	row := q.db.QueryRow(ctx, recodeTest,
		arg.UserID,
		arg.TargetID,
		arg.Message,
		arg.Images,
	)
	var i Recordtest
	err := row.Scan(
		&i.UserID,
		&i.TargetID,
		&i.Message,
		&i.Images,
		&i.CreatedAt,
	)
	return i, err
}
